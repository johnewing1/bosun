# To quickly see how to configure a victorOps alert go to section "Example Alert".

macro globals {
    $serviceName = {{cookiecutter.microservice_name}}
    $slackChannel = {{cookiecutter.slack_channel}}
    $slackURL = {{cookiecutter.slack_hook}}
    $victorRoute = {{cookiecutter.victor_ops_route}}
}

############
# VictorOps
############

notification victorOpsCritical {
    postTemplate = victorURL
    bodyTemplate = victorCriticalBody
    contentType = application/json
    print = true
}

notification victorOpsRecovery {
    postTemplate = victorURL
    bodyTemplate = victorRecoveryBody
    contentType = application/json
    print = true
}


################
# Event Logging
################

notification logCriticalEvent {
    postTemplate = logEventURL
    bodyTemplate = logEventBody
    contentType = application/json
    print = true
}

notification logWarningEvent {
    postTemplate = logEventURL
    bodyTemplate = logEventBody
    contentType = application/json
    print = true
}

notification logRecoveryEvent {
    postTemplate = logEventURL
    bodyTemplate = logEventBody
    contentType = application/json
    print = true
}

########
# Slack
########

notification slackCritical {
    postTemplate = slackURL
    bodyTemplate = slackCriticalBody
    contentType = application/json
    print = true
}

notification slackWarning {
    postTemplate = slackURL
    bodyTemplate = slackWarningBody
    contentType = application/json
    print = true
}

notification slackRecovery {
    postTemplate = slackURL
    bodyTemplate = slackRecoveryBody
    contentType = application/json
    print = true
}

################
# Example Alert
################

# That's the message your alert is going to produce. Customise it and remember you can use Hugo to produce dynamic content:
# https://gohugo.io/templates/go-templates/

template exampleAlertTemplate {
    inherit = base

    subject = Example Alert Subject
    body = This is the example alert body, which <strong>supports HTML</strong>
}

alert exampleAlert {
    macro = globals
    template = exampleAlertTemplate
    $timestamp = epoch()
    # We are going to construct an expression $shouldAlert with value between 0 (don't trigger an alert) to 1 (trigger an alert).

    # Your expression may look like this:

    # 1.  OpenTSDB query, which looks at heartbeats of all deployed bosun instances:
    $query=sum:bosun-test.availability.bosun-alert.alerting{instance=*}

    # 2.  For each instance count the number of heartbeats in the past hour:
    $queryResult = sum(q("$query","1h",""))

    # 3. Count how many instances there are:
    $instanceCount = count("$query", "1h", "")

    # 4.  We define a spammer instance, as an instance, which produces more than 50 heartbeats per hour.
    # Note the usage of `t`, which turns a number set into a series:
    # http://bosun.org/expressions#tnumberset-group-string-seriesset
    $spammerCount = sum(t($queryResult > 50, ""))

    # 5.  Let the on-call know if there are more than 90% of spammy services.
    $shouldAlert = ($spammerCount / $instanceCount) > 0.9

    # 6.  Uncomment the line below and remove 'crit = 0' to turn on alerting to victorOps.
    # crit = $shouldAlert
    crit = 0
    critNotification = victorOpsCritical

    # If the alert returns to normal status after being in WARN,CRIT or UNKNOWN state send a recovery notification
    normNotification = victorOpsRecovery
}

#####################
# Bosun Health Check
#####################

# DO NOT CHANGE BELOW HERE. DATA TRIBE USES THIS CHECK TO ENSURE AVAILABILITY

notification PostMetric {
    postTemplate = metricURL
    bodyTemplate = jsonBody

    contentType = application/json
}

template logAlert {
    inherit = base

    subject = Heartbeat
    body = ""

    metricURL = https://slipstream.skyscanner.net/api/put
    jsonBody = {"metric":"bosun-test.availability.bosun-alert.alerting","timestamp": {{.Eval .Alert.Vars.timestamp | printf "%.f" }},"value":1,"tags":{"instance": "{{.Alert.Vars.serviceName}}"}}
}

alert operational_health.dummy {
    macro = globals
    template=logAlert
    $timestamp=epoch()
    crit = 1
    critNotification = PostMetric
    log = true
    runEvery = 1
}